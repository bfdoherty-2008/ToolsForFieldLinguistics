
var redraw, g, renderer;

/* only do all this when document has finished loading (needed for RaphaelJS) */
window.onload = function() {
    
    var width = $(document).width() - 20;
    var height = $(document).height() - 60;
    
    g = new Graph();

	g.addNode("subtree");
	g.addNode("elements");
	g.addNode("morpheme");
	g.addEdge("subtree","subtree");
	g.addEdge("subtree","elements");
	g.addEdge("subtree","morpheme");
	g.addEdge("elements","subtree");
	g.addEdge("elements","elements");
	g.addEdge("elements","morpheme");
	g.addEdge("morpheme","subtree");
	g.addEdge("morpheme","elements");
	g.addEdge("morpheme","morpheme");
	g.addNode("syntax");
	g.addNode("trees");
	g.addNode("parse");
	g.addNode("constituents");
	g.addNode("number");
	g.addNode("approach");
	g.addNode("nanosyntax");
	g.addEdge("syntax","syntax");
	g.addEdge("syntax","trees");
	g.addEdge("syntax","parse");
	g.addEdge("syntax","constituents");
	g.addEdge("syntax","number");
	g.addEdge("syntax","approach");
	g.addEdge("syntax","nanosyntax");
	g.addEdge("trees","syntax");
	g.addEdge("trees","trees");
	g.addEdge("trees","parse");
	g.addEdge("trees","constituents");
	g.addEdge("trees","number");
	g.addEdge("trees","approach");
	g.addEdge("trees","nanosyntax");
	g.addEdge("parse","syntax");
	g.addEdge("parse","trees");
	g.addEdge("parse","parse");
	g.addEdge("parse","constituents");
	g.addEdge("parse","number");
	g.addEdge("parse","approach");
	g.addEdge("parse","nanosyntax");
	g.addEdge("constituents","syntax");
	g.addEdge("constituents","trees");
	g.addEdge("constituents","parse");
	g.addEdge("constituents","constituents");
	g.addEdge("constituents","number");
	g.addEdge("constituents","approach");
	g.addEdge("constituents","nanosyntax");
	g.addEdge("number","syntax");
	g.addEdge("number","trees");
	g.addEdge("number","parse");
	g.addEdge("number","constituents");
	g.addEdge("number","number");
	g.addEdge("number","approach");
	g.addEdge("number","nanosyntax");
	g.addEdge("approach","syntax");
	g.addEdge("approach","trees");
	g.addEdge("approach","parse");
	g.addEdge("approach","constituents");
	g.addEdge("approach","number");
	g.addEdge("approach","approach");
	g.addEdge("approach","nanosyntax");
	g.addEdge("nanosyntax","syntax");
	g.addEdge("nanosyntax","trees");
	g.addEdge("nanosyntax","parse");
	g.addEdge("nanosyntax","constituents");
	g.addEdge("nanosyntax","number");
	g.addEdge("nanosyntax","approach");
	g.addEdge("nanosyntax","nanosyntax");
	g.addNode("words");
	g.addNode("syntax");
	g.addNode("responsibility");
	g.addEdge("words","words");
	g.addEdge("words","syntax");
	g.addEdge("words","responsibility");
	g.addEdge("syntax","words");
	g.addEdge("syntax","syntax");
	g.addEdge("syntax","responsibility");
	g.addEdge("responsibility","words");
	g.addEdge("responsibility","syntax");
	g.addEdge("responsibility","responsibility");
	g.addNode("linguistics");
	g.addNode("work");
	g.addNode("morphemes");
	g.addNode("words");
	g.addNode("syntax");
	g.addNode("atoms");
	g.addEdge("linguistics","linguistics");
	g.addEdge("linguistics","work");
	g.addEdge("linguistics","morphemes");
	g.addEdge("linguistics","words");
	g.addEdge("linguistics","syntax");
	g.addEdge("linguistics","atoms");
	g.addEdge("work","linguistics");
	g.addEdge("work","work");
	g.addEdge("work","morphemes");
	g.addEdge("work","words");
	g.addEdge("work","syntax");
	g.addEdge("work","atoms");
	g.addEdge("morphemes","linguistics");
	g.addEdge("morphemes","work");
	g.addEdge("morphemes","morphemes");
	g.addEdge("morphemes","words");
	g.addEdge("morphemes","syntax");
	g.addEdge("morphemes","atoms");
	g.addEdge("words","linguistics");
	g.addEdge("words","work");
	g.addEdge("words","morphemes");
	g.addEdge("words","words");
	g.addEdge("words","syntax");
	g.addEdge("words","atoms");
	g.addEdge("syntax","linguistics");
	g.addEdge("syntax","work");
	g.addEdge("syntax","morphemes");
	g.addEdge("syntax","words");
	g.addEdge("syntax","syntax");
	g.addEdge("syntax","atoms");
	g.addEdge("atoms","linguistics");
	g.addEdge("atoms","work");
	g.addEdge("atoms","morphemes");
	g.addEdge("atoms","words");
	g.addEdge("atoms","syntax");
	g.addEdge("atoms","atoms");
	g.addNode("framework");
	g.addNode("lexicon");
	g.addNode("elements");
	g.addNode("syntax");
	g.addNode("entities");
	g.addNode("nanosyntax");
	g.addNode("words");
	g.addEdge("framework","framework");
	g.addEdge("framework","lexicon");
	g.addEdge("framework","elements");
	g.addEdge("framework","syntax");
	g.addEdge("framework","entities");
	g.addEdge("framework","nanosyntax");
	g.addEdge("framework","words");
	g.addEdge("lexicon","framework");
	g.addEdge("lexicon","lexicon");
	g.addEdge("lexicon","elements");
	g.addEdge("lexicon","syntax");
	g.addEdge("lexicon","entities");
	g.addEdge("lexicon","nanosyntax");
	g.addEdge("lexicon","words");
	g.addEdge("elements","framework");
	g.addEdge("elements","lexicon");
	g.addEdge("elements","elements");
	g.addEdge("elements","syntax");
	g.addEdge("elements","entities");
	g.addEdge("elements","nanosyntax");
	g.addEdge("elements","words");
	g.addEdge("syntax","framework");
	g.addEdge("syntax","lexicon");
	g.addEdge("syntax","elements");
	g.addEdge("syntax","syntax");
	g.addEdge("syntax","entities");
	g.addEdge("syntax","nanosyntax");
	g.addEdge("syntax","words");
	g.addEdge("entities","framework");
	g.addEdge("entities","lexicon");
	g.addEdge("entities","elements");
	g.addEdge("entities","syntax");
	g.addEdge("entities","entities");
	g.addEdge("entities","nanosyntax");
	g.addEdge("entities","words");
	g.addEdge("nanosyntax","framework");
	g.addEdge("nanosyntax","lexicon");
	g.addEdge("nanosyntax","elements");
	g.addEdge("nanosyntax","syntax");
	g.addEdge("nanosyntax","entities");
	g.addEdge("nanosyntax","nanosyntax");
	g.addEdge("nanosyntax","words");
	g.addEdge("words","framework");
	g.addEdge("words","lexicon");
	g.addEdge("words","elements");
	g.addEdge("words","syntax");
	g.addEdge("words","entities");
	g.addEdge("words","nanosyntax");
	g.addEdge("words","words");
	g.addNode("concept");
	g.addNode("syntactic");
	g.addNode("relations");
	g.addNode("article");
	g.addNode("hale");
	g.addNode("kenneth");
	g.addNode("beginnings");
	g.addNode("nanosyntax");
	g.addNode("structure");
	g.addNode("argument");
	g.addNode("representation");
	g.addNode("lexical");
	g.addNode("jay");
	g.addNode("keyser");
	g.addEdge("concept","concept");
	g.addEdge("concept","syntactic");
	g.addEdge("concept","relations");
	g.addEdge("concept","article");
	g.addEdge("concept","hale");
	g.addEdge("concept","kenneth");
	g.addEdge("concept","beginnings");
	g.addEdge("concept","nanosyntax");
	g.addEdge("concept","structure");
	g.addEdge("concept","argument");
	g.addEdge("concept","representation");
	g.addEdge("concept","lexical");
	g.addEdge("concept","jay");
	g.addEdge("concept","keyser");
	g.addEdge("syntactic","concept");
	g.addEdge("syntactic","syntactic");
	g.addEdge("syntactic","relations");
	g.addEdge("syntactic","article");
	g.addEdge("syntactic","hale");
	g.addEdge("syntactic","kenneth");
	g.addEdge("syntactic","beginnings");
	g.addEdge("syntactic","nanosyntax");
	g.addEdge("syntactic","structure");
	g.addEdge("syntactic","argument");
	g.addEdge("syntactic","representation");
	g.addEdge("syntactic","lexical");
	g.addEdge("syntactic","jay");
	g.addEdge("syntactic","keyser");
	g.addEdge("relations","concept");
	g.addEdge("relations","syntactic");
	g.addEdge("relations","relations");
	g.addEdge("relations","article");
	g.addEdge("relations","hale");
	g.addEdge("relations","kenneth");
	g.addEdge("relations","beginnings");
	g.addEdge("relations","nanosyntax");
	g.addEdge("relations","structure");
	g.addEdge("relations","argument");
	g.addEdge("relations","representation");
	g.addEdge("relations","lexical");
	g.addEdge("relations","jay");
	g.addEdge("relations","keyser");
	g.addEdge("article","concept");
	g.addEdge("article","syntactic");
	g.addEdge("article","relations");
	g.addEdge("article","article");
	g.addEdge("article","hale");
	g.addEdge("article","kenneth");
	g.addEdge("article","beginnings");
	g.addEdge("article","nanosyntax");
	g.addEdge("article","structure");
	g.addEdge("article","argument");
	g.addEdge("article","representation");
	g.addEdge("article","lexical");
	g.addEdge("article","jay");
	g.addEdge("article","keyser");
	g.addEdge("hale","concept");
	g.addEdge("hale","syntactic");
	g.addEdge("hale","relations");
	g.addEdge("hale","article");
	g.addEdge("hale","hale");
	g.addEdge("hale","kenneth");
	g.addEdge("hale","beginnings");
	g.addEdge("hale","nanosyntax");
	g.addEdge("hale","structure");
	g.addEdge("hale","argument");
	g.addEdge("hale","representation");
	g.addEdge("hale","lexical");
	g.addEdge("hale","jay");
	g.addEdge("hale","keyser");
	g.addEdge("kenneth","concept");
	g.addEdge("kenneth","syntactic");
	g.addEdge("kenneth","relations");
	g.addEdge("kenneth","article");
	g.addEdge("kenneth","hale");
	g.addEdge("kenneth","kenneth");
	g.addEdge("kenneth","beginnings");
	g.addEdge("kenneth","nanosyntax");
	g.addEdge("kenneth","structure");
	g.addEdge("kenneth","argument");
	g.addEdge("kenneth","representation");
	g.addEdge("kenneth","lexical");
	g.addEdge("kenneth","jay");
	g.addEdge("kenneth","keyser");
	g.addEdge("beginnings","concept");
	g.addEdge("beginnings","syntactic");
	g.addEdge("beginnings","relations");
	g.addEdge("beginnings","article");
	g.addEdge("beginnings","hale");
	g.addEdge("beginnings","kenneth");
	g.addEdge("beginnings","beginnings");
	g.addEdge("beginnings","nanosyntax");
	g.addEdge("beginnings","structure");
	g.addEdge("beginnings","argument");
	g.addEdge("beginnings","representation");
	g.addEdge("beginnings","lexical");
	g.addEdge("beginnings","jay");
	g.addEdge("beginnings","keyser");
	g.addEdge("nanosyntax","concept");
	g.addEdge("nanosyntax","syntactic");
	g.addEdge("nanosyntax","relations");
	g.addEdge("nanosyntax","article");
	g.addEdge("nanosyntax","hale");
	g.addEdge("nanosyntax","kenneth");
	g.addEdge("nanosyntax","beginnings");
	g.addEdge("nanosyntax","nanosyntax");
	g.addEdge("nanosyntax","structure");
	g.addEdge("nanosyntax","argument");
	g.addEdge("nanosyntax","representation");
	g.addEdge("nanosyntax","lexical");
	g.addEdge("nanosyntax","jay");
	g.addEdge("nanosyntax","keyser");
	g.addEdge("structure","concept");
	g.addEdge("structure","syntactic");
	g.addEdge("structure","relations");
	g.addEdge("structure","article");
	g.addEdge("structure","hale");
	g.addEdge("structure","kenneth");
	g.addEdge("structure","beginnings");
	g.addEdge("structure","nanosyntax");
	g.addEdge("structure","structure");
	g.addEdge("structure","argument");
	g.addEdge("structure","representation");
	g.addEdge("structure","lexical");
	g.addEdge("structure","jay");
	g.addEdge("structure","keyser");
	g.addEdge("argument","concept");
	g.addEdge("argument","syntactic");
	g.addEdge("argument","relations");
	g.addEdge("argument","article");
	g.addEdge("argument","hale");
	g.addEdge("argument","kenneth");
	g.addEdge("argument","beginnings");
	g.addEdge("argument","nanosyntax");
	g.addEdge("argument","structure");
	g.addEdge("argument","argument");
	g.addEdge("argument","representation");
	g.addEdge("argument","lexical");
	g.addEdge("argument","jay");
	g.addEdge("argument","keyser");
	g.addEdge("representation","concept");
	g.addEdge("representation","syntactic");
	g.addEdge("representation","relations");
	g.addEdge("representation","article");
	g.addEdge("representation","hale");
	g.addEdge("representation","kenneth");
	g.addEdge("representation","beginnings");
	g.addEdge("representation","nanosyntax");
	g.addEdge("representation","structure");
	g.addEdge("representation","argument");
	g.addEdge("representation","representation");
	g.addEdge("representation","lexical");
	g.addEdge("representation","jay");
	g.addEdge("representation","keyser");
	g.addEdge("lexical","concept");
	g.addEdge("lexical","syntactic");
	g.addEdge("lexical","relations");
	g.addEdge("lexical","article");
	g.addEdge("lexical","hale");
	g.addEdge("lexical","kenneth");
	g.addEdge("lexical","beginnings");
	g.addEdge("lexical","nanosyntax");
	g.addEdge("lexical","structure");
	g.addEdge("lexical","argument");
	g.addEdge("lexical","representation");
	g.addEdge("lexical","lexical");
	g.addEdge("lexical","jay");
	g.addEdge("lexical","keyser");
	g.addEdge("jay","concept");
	g.addEdge("jay","syntactic");
	g.addEdge("jay","relations");
	g.addEdge("jay","article");
	g.addEdge("jay","hale");
	g.addEdge("jay","kenneth");
	g.addEdge("jay","beginnings");
	g.addEdge("jay","nanosyntax");
	g.addEdge("jay","structure");
	g.addEdge("jay","argument");
	g.addEdge("jay","representation");
	g.addEdge("jay","lexical");
	g.addEdge("jay","jay");
	g.addEdge("jay","keyser");
	g.addEdge("keyser","concept");
	g.addEdge("keyser","syntactic");
	g.addEdge("keyser","relations");
	g.addEdge("keyser","article");
	g.addEdge("keyser","hale");
	g.addEdge("keyser","kenneth");
	g.addEdge("keyser","beginnings");
	g.addEdge("keyser","nanosyntax");
	g.addEdge("keyser","structure");
	g.addEdge("keyser","argument");
	g.addEdge("keyser","representation");
	g.addEdge("keyser","lexical");
	g.addEdge("keyser","jay");
	g.addEdge("keyser","keyser");

    /* layout the graph using the Spring layout implementation */
    var layouter = new Graph.Layout.Spring(g);
    
    /* draw the graph using the RaphaelJS draw implementation */
    renderer = new Graph.Renderer.Raphael('canvas', g, width, height);
    
    redraw = function() {
        layouter.layout();
        renderer.draw();
    };
    hide = function(id) {
        g.nodes[id].hide();
    };
    show = function(id) {
        g.nodes[id].show();
    };
    //    console.log(g.nodes["kiwi"]);
};
var redraw, g, renderer;

/* only do all this when document has finished loading (needed for RaphaelJS) */
window.onload = function() {
    
    var width = $(document).width() - 20;
    var height = $(document).height() - 60;
    
    g = new Graph();

	g.addNode("subtree");
	g.addNode("elements");
	g.addNode("morpheme");
	g.addEdge("subtree","subtree");
	g.addEdge("subtree","elements");
	g.addEdge("subtree","morpheme");
	g.addEdge("elements","subtree");
	g.addEdge("elements","elements");
	g.addEdge("elements","morpheme");
	g.addEdge("morpheme","subtree");
	g.addEdge("morpheme","elements");
	g.addEdge("morpheme","morpheme");
	g.addNode("syntax");
	g.addNode("trees");
	g.addNode("parse");
	g.addNode("constituents");
	g.addNode("number");
	g.addNode("approach");
	g.addNode("nanosyntax");
	g.addEdge("syntax","syntax");
	g.addEdge("syntax","trees");
	g.addEdge("syntax","parse");
	g.addEdge("syntax","constituents");
	g.addEdge("syntax","number");
	g.addEdge("syntax","approach");
	g.addEdge("syntax","nanosyntax");
	g.addEdge("trees","syntax");
	g.addEdge("trees","trees");
	g.addEdge("trees","parse");
	g.addEdge("trees","constituents");
	g.addEdge("trees","number");
	g.addEdge("trees","approach");
	g.addEdge("trees","nanosyntax");
	g.addEdge("parse","syntax");
	g.addEdge("parse","trees");
	g.addEdge("parse","parse");
	g.addEdge("parse","constituents");
	g.addEdge("parse","number");
	g.addEdge("parse","approach");
	g.addEdge("parse","nanosyntax");
	g.addEdge("constituents","syntax");
	g.addEdge("constituents","trees");
	g.addEdge("constituents","parse");
	g.addEdge("constituents","constituents");
	g.addEdge("constituents","number");
	g.addEdge("constituents","approach");
	g.addEdge("constituents","nanosyntax");
	g.addEdge("number","syntax");
	g.addEdge("number","trees");
	g.addEdge("number","parse");
	g.addEdge("number","constituents");
	g.addEdge("number","number");
	g.addEdge("number","approach");
	g.addEdge("number","nanosyntax");
	g.addEdge("approach","syntax");
	g.addEdge("approach","trees");
	g.addEdge("approach","parse");
	g.addEdge("approach","constituents");
	g.addEdge("approach","number");
	g.addEdge("approach","approach");
	g.addEdge("approach","nanosyntax");
	g.addEdge("nanosyntax","syntax");
	g.addEdge("nanosyntax","trees");
	g.addEdge("nanosyntax","parse");
	g.addEdge("nanosyntax","constituents");
	g.addEdge("nanosyntax","number");
	g.addEdge("nanosyntax","approach");
	g.addEdge("nanosyntax","nanosyntax");
	g.addNode("words");
	g.addNode("syntax");
	g.addNode("responsibility");
	g.addEdge("words","words");
	g.addEdge("words","syntax");
	g.addEdge("words","responsibility");
	g.addEdge("syntax","words");
	g.addEdge("syntax","syntax");
	g.addEdge("syntax","responsibility");
	g.addEdge("responsibility","words");
	g.addEdge("responsibility","syntax");
	g.addEdge("responsibility","responsibility");
	g.addNode("linguistics");
	g.addNode("work");
	g.addNode("morphemes");
	g.addNode("words");
	g.addNode("syntax");
	g.addNode("atoms");
	g.addEdge("linguistics","linguistics");
	g.addEdge("linguistics","work");
	g.addEdge("linguistics","morphemes");
	g.addEdge("linguistics","words");
	g.addEdge("linguistics","syntax");
	g.addEdge("linguistics","atoms");
	g.addEdge("work","linguistics");
	g.addEdge("work","work");
	g.addEdge("work","morphemes");
	g.addEdge("work","words");
	g.addEdge("work","syntax");
	g.addEdge("work","atoms");
	g.addEdge("morphemes","linguistics");
	g.addEdge("morphemes","work");
	g.addEdge("morphemes","morphemes");
	g.addEdge("morphemes","words");
	g.addEdge("morphemes","syntax");
	g.addEdge("morphemes","atoms");
	g.addEdge("words","linguistics");
	g.addEdge("words","work");
	g.addEdge("words","morphemes");
	g.addEdge("words","words");
	g.addEdge("words","syntax");
	g.addEdge("words","atoms");
	g.addEdge("syntax","linguistics");
	g.addEdge("syntax","work");
	g.addEdge("syntax","morphemes");
	g.addEdge("syntax","words");
	g.addEdge("syntax","syntax");
	g.addEdge("syntax","atoms");
	g.addEdge("atoms","linguistics");
	g.addEdge("atoms","work");
	g.addEdge("atoms","morphemes");
	g.addEdge("atoms","words");
	g.addEdge("atoms","syntax");
	g.addEdge("atoms","atoms");
	g.addNode("framework");
	g.addNode("lexicon");
	g.addNode("elements");
	g.addNode("syntax");
	g.addNode("entities");
	g.addNode("nanosyntax");
	g.addNode("words");
	g.addEdge("framework","framework");
	g.addEdge("framework","lexicon");
	g.addEdge("framework","elements");
	g.addEdge("framework","syntax");
	g.addEdge("framework","entities");
	g.addEdge("framework","nanosyntax");
	g.addEdge("framework","words");
	g.addEdge("lexicon","framework");
	g.addEdge("lexicon","lexicon");
	g.addEdge("lexicon","elements");
	g.addEdge("lexicon","syntax");
	g.addEdge("lexicon","entities");
	g.addEdge("lexicon","nanosyntax");
	g.addEdge("lexicon","words");
	g.addEdge("elements","framework");
	g.addEdge("elements","lexicon");
	g.addEdge("elements","elements");
	g.addEdge("elements","syntax");
	g.addEdge("elements","entities");
	g.addEdge("elements","nanosyntax");
	g.addEdge("elements","words");
	g.addEdge("syntax","framework");
	g.addEdge("syntax","lexicon");
	g.addEdge("syntax","elements");
	g.addEdge("syntax","syntax");
	g.addEdge("syntax","entities");
	g.addEdge("syntax","nanosyntax");
	g.addEdge("syntax","words");
	g.addEdge("entities","framework");
	g.addEdge("entities","lexicon");
	g.addEdge("entities","elements");
	g.addEdge("entities","syntax");
	g.addEdge("entities","entities");
	g.addEdge("entities","nanosyntax");
	g.addEdge("entities","words");
	g.addEdge("nanosyntax","framework");
	g.addEdge("nanosyntax","lexicon");
	g.addEdge("nanosyntax","elements");
	g.addEdge("nanosyntax","syntax");
	g.addEdge("nanosyntax","entities");
	g.addEdge("nanosyntax","nanosyntax");
	g.addEdge("nanosyntax","words");
	g.addEdge("words","framework");
	g.addEdge("words","lexicon");
	g.addEdge("words","elements");
	g.addEdge("words","syntax");
	g.addEdge("words","entities");
	g.addEdge("words","nanosyntax");
	g.addEdge("words","words");
	g.addNode("concept");
	g.addNode("syntactic");
	g.addNode("relations");
	g.addNode("article");
	g.addNode("hale");
	g.addNode("kenneth");
	g.addNode("beginnings");
	g.addNode("nanosyntax");
	g.addNode("structure");
	g.addNode("argument");
	g.addNode("representation");
	g.addNode("lexical");
	g.addNode("jay");
	g.addNode("keyser");
	g.addEdge("concept","concept");
	g.addEdge("concept","syntactic");
	g.addEdge("concept","relations");
	g.addEdge("concept","article");
	g.addEdge("concept","hale");
	g.addEdge("concept","kenneth");
	g.addEdge("concept","beginnings");
	g.addEdge("concept","nanosyntax");
	g.addEdge("concept","structure");
	g.addEdge("concept","argument");
	g.addEdge("concept","representation");
	g.addEdge("concept","lexical");
	g.addEdge("concept","jay");
	g.addEdge("concept","keyser");
	g.addEdge("syntactic","concept");
	g.addEdge("syntactic","syntactic");
	g.addEdge("syntactic","relations");
	g.addEdge("syntactic","article");
	g.addEdge("syntactic","hale");
	g.addEdge("syntactic","kenneth");
	g.addEdge("syntactic","beginnings");
	g.addEdge("syntactic","nanosyntax");
	g.addEdge("syntactic","structure");
	g.addEdge("syntactic","argument");
	g.addEdge("syntactic","representation");
	g.addEdge("syntactic","lexical");
	g.addEdge("syntactic","jay");
	g.addEdge("syntactic","keyser");
	g.addEdge("relations","concept");
	g.addEdge("relations","syntactic");
	g.addEdge("relations","relations");
	g.addEdge("relations","article");
	g.addEdge("relations","hale");
	g.addEdge("relations","kenneth");
	g.addEdge("relations","beginnings");
	g.addEdge("relations","nanosyntax");
	g.addEdge("relations","structure");
	g.addEdge("relations","argument");
	g.addEdge("relations","representation");
	g.addEdge("relations","lexical");
	g.addEdge("relations","jay");
	g.addEdge("relations","keyser");
	g.addEdge("article","concept");
	g.addEdge("article","syntactic");
	g.addEdge("article","relations");
	g.addEdge("article","article");
	g.addEdge("article","hale");
	g.addEdge("article","kenneth");
	g.addEdge("article","beginnings");
	g.addEdge("article","nanosyntax");
	g.addEdge("article","structure");
	g.addEdge("article","argument");
	g.addEdge("article","representation");
	g.addEdge("article","lexical");
	g.addEdge("article","jay");
	g.addEdge("article","keyser");
	g.addEdge("hale","concept");
	g.addEdge("hale","syntactic");
	g.addEdge("hale","relations");
	g.addEdge("hale","article");
	g.addEdge("hale","hale");
	g.addEdge("hale","kenneth");
	g.addEdge("hale","beginnings");
	g.addEdge("hale","nanosyntax");
	g.addEdge("hale","structure");
	g.addEdge("hale","argument");
	g.addEdge("hale","representation");
	g.addEdge("hale","lexical");
	g.addEdge("hale","jay");
	g.addEdge("hale","keyser");
	g.addEdge("kenneth","concept");
	g.addEdge("kenneth","syntactic");
	g.addEdge("kenneth","relations");
	g.addEdge("kenneth","article");
	g.addEdge("kenneth","hale");
	g.addEdge("kenneth","kenneth");
	g.addEdge("kenneth","beginnings");
	g.addEdge("kenneth","nanosyntax");
	g.addEdge("kenneth","structure");
	g.addEdge("kenneth","argument");
	g.addEdge("kenneth","representation");
	g.addEdge("kenneth","lexical");
	g.addEdge("kenneth","jay");
	g.addEdge("kenneth","keyser");
	g.addEdge("beginnings","concept");
	g.addEdge("beginnings","syntactic");
	g.addEdge("beginnings","relations");
	g.addEdge("beginnings","article");
	g.addEdge("beginnings","hale");
	g.addEdge("beginnings","kenneth");
	g.addEdge("beginnings","beginnings");
	g.addEdge("beginnings","nanosyntax");
	g.addEdge("beginnings","structure");
	g.addEdge("beginnings","argument");
	g.addEdge("beginnings","representation");
	g.addEdge("beginnings","lexical");
	g.addEdge("beginnings","jay");
	g.addEdge("beginnings","keyser");
	g.addEdge("nanosyntax","concept");
	g.addEdge("nanosyntax","syntactic");
	g.addEdge("nanosyntax","relations");
	g.addEdge("nanosyntax","article");
	g.addEdge("nanosyntax","hale");
	g.addEdge("nanosyntax","kenneth");
	g.addEdge("nanosyntax","beginnings");
	g.addEdge("nanosyntax","nanosyntax");
	g.addEdge("nanosyntax","structure");
	g.addEdge("nanosyntax","argument");
	g.addEdge("nanosyntax","representation");
	g.addEdge("nanosyntax","lexical");
	g.addEdge("nanosyntax","jay");
	g.addEdge("nanosyntax","keyser");
	g.addEdge("structure","concept");
	g.addEdge("structure","syntactic");
	g.addEdge("structure","relations");
	g.addEdge("structure","article");
	g.addEdge("structure","hale");
	g.addEdge("structure","kenneth");
	g.addEdge("structure","beginnings");
	g.addEdge("structure","nanosyntax");
	g.addEdge("structure","structure");
	g.addEdge("structure","argument");
	g.addEdge("structure","representation");
	g.addEdge("structure","lexical");
	g.addEdge("structure","jay");
	g.addEdge("structure","keyser");
	g.addEdge("argument","concept");
	g.addEdge("argument","syntactic");
	g.addEdge("argument","relations");
	g.addEdge("argument","article");
	g.addEdge("argument","hale");
	g.addEdge("argument","kenneth");
	g.addEdge("argument","beginnings");
	g.addEdge("argument","nanosyntax");
	g.addEdge("argument","structure");
	g.addEdge("argument","argument");
	g.addEdge("argument","representation");
	g.addEdge("argument","lexical");
	g.addEdge("argument","jay");
	g.addEdge("argument","keyser");
	g.addEdge("representation","concept");
	g.addEdge("representation","syntactic");
	g.addEdge("representation","relations");
	g.addEdge("representation","article");
	g.addEdge("representation","hale");
	g.addEdge("representation","kenneth");
	g.addEdge("representation","beginnings");
	g.addEdge("representation","nanosyntax");
	g.addEdge("representation","structure");
	g.addEdge("representation","argument");
	g.addEdge("representation","representation");
	g.addEdge("representation","lexical");
	g.addEdge("representation","jay");
	g.addEdge("representation","keyser");
	g.addEdge("lexical","concept");
	g.addEdge("lexical","syntactic");
	g.addEdge("lexical","relations");
	g.addEdge("lexical","article");
	g.addEdge("lexical","hale");
	g.addEdge("lexical","kenneth");
	g.addEdge("lexical","beginnings");
	g.addEdge("lexical","nanosyntax");
	g.addEdge("lexical","structure");
	g.addEdge("lexical","argument");
	g.addEdge("lexical","representation");
	g.addEdge("lexical","lexical");
	g.addEdge("lexical","jay");
	g.addEdge("lexical","keyser");
	g.addEdge("jay","concept");
	g.addEdge("jay","syntactic");
	g.addEdge("jay","relations");
	g.addEdge("jay","article");
	g.addEdge("jay","hale");
	g.addEdge("jay","kenneth");
	g.addEdge("jay","beginnings");
	g.addEdge("jay","nanosyntax");
	g.addEdge("jay","structure");
	g.addEdge("jay","argument");
	g.addEdge("jay","representation");
	g.addEdge("jay","lexical");
	g.addEdge("jay","jay");
	g.addEdge("jay","keyser");
	g.addEdge("keyser","concept");
	g.addEdge("keyser","syntactic");
	g.addEdge("keyser","relations");
	g.addEdge("keyser","article");
	g.addEdge("keyser","hale");
	g.addEdge("keyser","kenneth");
	g.addEdge("keyser","beginnings");
	g.addEdge("keyser","nanosyntax");
	g.addEdge("keyser","structure");
	g.addEdge("keyser","argument");
	g.addEdge("keyser","representation");
	g.addEdge("keyser","lexical");
	g.addEdge("keyser","jay");
	g.addEdge("keyser","keyser");

    /* layout the graph using the Spring layout implementation */
    var layouter = new Graph.Layout.Spring(g);
    
    /* draw the graph using the RaphaelJS draw implementation */
    renderer = new Graph.Renderer.Raphael('canvas', g, width, height);
    
    redraw = function() {
        layouter.layout();
        renderer.draw();
    };
    hide = function(id) {
        g.nodes[id].hide();
    };
    show = function(id) {
        g.nodes[id].show();
    };
    //    console.log(g.nodes["kiwi"]);
};
var redraw, g, renderer;

/* only do all this when document has finished loading (needed for RaphaelJS) */
window.onload = function() {
    
    var width = $(document).width() - 20;
    var height = $(document).height() - 60;
    
    g = new Graph();

	g.addNode("node");
	g.addNode("branch");
	g.addNode("parent");
	g.addNode("node");
	g.addEdge("node","node");
	g.addEdge("node","branch");
	g.addEdge("node","parent");
	g.addEdge("node","node");
	g.addEdge("branch","node");
	g.addEdge("branch","branch");
	g.addEdge("branch","parent");
	g.addEdge("branch","node");
	g.addEdge("parent","node");
	g.addEdge("parent","branch");
	g.addEdge("parent","parent");
	g.addEdge("parent","node");
	g.addEdge("node","node");
	g.addEdge("node","branch");
	g.addEdge("node","parent");
	g.addEdge("node","node");
	g.addNode("node");
	g.addNode("parent");
	g.addNode("node");
	g.addNode("child");
	g.addNode("node");
	g.addEdge("node","node");
	g.addEdge("node","parent");
	g.addEdge("node","node");
	g.addEdge("node","child");
	g.addEdge("node","node");
	g.addEdge("parent","node");
	g.addEdge("parent","parent");
	g.addEdge("parent","node");
	g.addEdge("parent","child");
	g.addEdge("parent","node");
	g.addEdge("node","node");
	g.addEdge("node","parent");
	g.addEdge("node","node");
	g.addEdge("node","child");
	g.addEdge("node","node");
	g.addEdge("child","node");
	g.addEdge("child","parent");
	g.addEdge("child","node");
	g.addEdge("child","child");
	g.addEdge("child","node");
	g.addEdge("node","node");
	g.addEdge("node","parent");
	g.addEdge("node","node");
	g.addEdge("node","child");
	g.addEdge("node","node");
	g.addNode("nodes");
	g.addNode("leaf");
	g.addNode("ball");
	g.addNode("john");
	g.addNode("np");
	g.addNode("node");
	g.addNode("root");
	g.addNode("nodes");
	g.addNode("branch");
	g.addNode("vp");
	g.addNode("example");
	g.addNode("right");
	g.addEdge("nodes","nodes");
	g.addEdge("nodes","leaf");
	g.addEdge("nodes","ball");
	g.addEdge("nodes","john");
	g.addEdge("nodes","np");
	g.addEdge("nodes","node");
	g.addEdge("nodes","root");
	g.addEdge("nodes","nodes");
	g.addEdge("nodes","branch");
	g.addEdge("nodes","vp");
	g.addEdge("nodes","example");
	g.addEdge("nodes","right");
	g.addEdge("leaf","nodes");
	g.addEdge("leaf","leaf");
	g.addEdge("leaf","ball");
	g.addEdge("leaf","john");
	g.addEdge("leaf","np");
	g.addEdge("leaf","node");
	g.addEdge("leaf","root");
	g.addEdge("leaf","nodes");
	g.addEdge("leaf","branch");
	g.addEdge("leaf","vp");
	g.addEdge("leaf","example");
	g.addEdge("leaf","right");
	g.addEdge("ball","nodes");
	g.addEdge("ball","leaf");
	g.addEdge("ball","ball");
	g.addEdge("ball","john");
	g.addEdge("ball","np");
	g.addEdge("ball","node");
	g.addEdge("ball","root");
	g.addEdge("ball","nodes");
	g.addEdge("ball","branch");
	g.addEdge("ball","vp");
	g.addEdge("ball","example");
	g.addEdge("ball","right");
	g.addEdge("john","nodes");
	g.addEdge("john","leaf");
	g.addEdge("john","ball");
	g.addEdge("john","john");
	g.addEdge("john","np");
	g.addEdge("john","node");
	g.addEdge("john","root");
	g.addEdge("john","nodes");
	g.addEdge("john","branch");
	g.addEdge("john","vp");
	g.addEdge("john","example");
	g.addEdge("john","right");
	g.addEdge("np","nodes");
	g.addEdge("np","leaf");
	g.addEdge("np","ball");
	g.addEdge("np","john");
	g.addEdge("np","np");
	g.addEdge("np","node");
	g.addEdge("np","root");
	g.addEdge("np","nodes");
	g.addEdge("np","branch");
	g.addEdge("np","vp");
	g.addEdge("np","example");
	g.addEdge("np","right");
	g.addEdge("node","nodes");
	g.addEdge("node","leaf");
	g.addEdge("node","ball");
	g.addEdge("node","john");
	g.addEdge("node","np");
	g.addEdge("node","node");
	g.addEdge("node","root");
	g.addEdge("node","nodes");
	g.addEdge("node","branch");
	g.addEdge("node","vp");
	g.addEdge("node","example");
	g.addEdge("node","right");
	g.addEdge("root","nodes");
	g.addEdge("root","leaf");
	g.addEdge("root","ball");
	g.addEdge("root","john");
	g.addEdge("root","np");
	g.addEdge("root","node");
	g.addEdge("root","root");
	g.addEdge("root","nodes");
	g.addEdge("root","branch");
	g.addEdge("root","vp");
	g.addEdge("root","example");
	g.addEdge("root","right");
	g.addEdge("nodes","nodes");
	g.addEdge("nodes","leaf");
	g.addEdge("nodes","ball");
	g.addEdge("nodes","john");
	g.addEdge("nodes","np");
	g.addEdge("nodes","node");
	g.addEdge("nodes","root");
	g.addEdge("nodes","nodes");
	g.addEdge("nodes","branch");
	g.addEdge("nodes","vp");
	g.addEdge("nodes","example");
	g.addEdge("nodes","right");
	g.addEdge("branch","nodes");
	g.addEdge("branch","leaf");
	g.addEdge("branch","ball");
	g.addEdge("branch","john");
	g.addEdge("branch","np");
	g.addEdge("branch","node");
	g.addEdge("branch","root");
	g.addEdge("branch","nodes");
	g.addEdge("branch","branch");
	g.addEdge("branch","vp");
	g.addEdge("branch","example");
	g.addEdge("branch","right");
	g.addEdge("vp","nodes");
	g.addEdge("vp","leaf");
	g.addEdge("vp","ball");
	g.addEdge("vp","john");
	g.addEdge("vp","np");
	g.addEdge("vp","node");
	g.addEdge("vp","root");
	g.addEdge("vp","nodes");
	g.addEdge("vp","branch");
	g.addEdge("vp","vp");
	g.addEdge("vp","example");
	g.addEdge("vp","right");
	g.addEdge("example","nodes");
	g.addEdge("example","leaf");
	g.addEdge("example","ball");
	g.addEdge("example","john");
	g.addEdge("example","np");
	g.addEdge("example","node");
	g.addEdge("example","root");
	g.addEdge("example","nodes");
	g.addEdge("example","branch");
	g.addEdge("example","vp");
	g.addEdge("example","example");
	g.addEdge("example","right");
	g.addEdge("right","nodes");
	g.addEdge("right","leaf");
	g.addEdge("right","ball");
	g.addEdge("right","john");
	g.addEdge("right","np");
	g.addEdge("right","node");
	g.addEdge("right","root");
	g.addEdge("right","nodes");
	g.addEdge("right","branch");
	g.addEdge("right","vp");
	g.addEdge("right","example");
	g.addEdge("right","right");
	g.addNode("node");
	g.addNode("leaf");
	g.addNode("node");
	g.addNode("branch");
	g.addNode("node");
	g.addNode("node");
	g.addNode("root");
	g.addNode("parse");
	g.addNode("tree");
	g.addEdge("node","node");
	g.addEdge("node","leaf");
	g.addEdge("node","node");
	g.addEdge("node","branch");
	g.addEdge("node","node");
	g.addEdge("node","node");
	g.addEdge("node","root");
	g.addEdge("node","parse");
	g.addEdge("node","tree");
	g.addEdge("leaf","node");
	g.addEdge("leaf","leaf");
	g.addEdge("leaf","node");
	g.addEdge("leaf","branch");
	g.addEdge("leaf","node");
	g.addEdge("leaf","node");
	g.addEdge("leaf","root");
	g.addEdge("leaf","parse");
	g.addEdge("leaf","tree");
	g.addEdge("node","node");
	g.addEdge("node","leaf");
	g.addEdge("node","node");
	g.addEdge("node","branch");
	g.addEdge("node","node");
	g.addEdge("node","node");
	g.addEdge("node","root");
	g.addEdge("node","parse");
	g.addEdge("node","tree");
	g.addEdge("branch","node");
	g.addEdge("branch","leaf");
	g.addEdge("branch","node");
	g.addEdge("branch","branch");
	g.addEdge("branch","node");
	g.addEdge("branch","node");
	g.addEdge("branch","root");
	g.addEdge("branch","parse");
	g.addEdge("branch","tree");
	g.addEdge("node","node");
	g.addEdge("node","leaf");
	g.addEdge("node","node");
	g.addEdge("node","branch");
	g.addEdge("node","node");
	g.addEdge("node","node");
	g.addEdge("node","root");
	g.addEdge("node","parse");
	g.addEdge("node","tree");
	g.addEdge("node","node");
	g.addEdge("node","leaf");
	g.addEdge("node","node");
	g.addEdge("node","branch");
	g.addEdge("node","node");
	g.addEdge("node","node");
	g.addEdge("node","root");
	g.addEdge("node","parse");
	g.addEdge("node","tree");
	g.addEdge("root","node");
	g.addEdge("root","leaf");
	g.addEdge("root","node");
	g.addEdge("root","branch");
	g.addEdge("root","node");
	g.addEdge("root","node");
	g.addEdge("root","root");
	g.addEdge("root","parse");
	g.addEdge("root","tree");
	g.addEdge("parse","node");
	g.addEdge("parse","leaf");
	g.addEdge("parse","node");
	g.addEdge("parse","branch");
	g.addEdge("parse","node");
	g.addEdge("parse","node");
	g.addEdge("parse","root");
	g.addEdge("parse","parse");
	g.addEdge("parse","tree");
	g.addEdge("tree","node");
	g.addEdge("tree","leaf");
	g.addEdge("tree","node");
	g.addEdge("tree","branch");
	g.addEdge("tree","node");
	g.addEdge("tree","node");
	g.addEdge("tree","root");
	g.addEdge("tree","parse");
	g.addEdge("tree","tree");
	g.addNode("example");
	g.addNode("abbreviations");
	g.addEdge("example","example");
	g.addEdge("example","abbreviations");
	g.addEdge("abbreviations","example");
	g.addEdge("abbreviations","abbreviations");
	g.addNode("nodes");
	g.addNode("leaf");
	g.addNode("ball");
	g.addNode("john");
	g.addNode("parse");
	g.addNode("structure");
	g.addNode("tree");
	g.addEdge("nodes","nodes");
	g.addEdge("nodes","leaf");
	g.addEdge("nodes","ball");
	g.addEdge("nodes","john");
	g.addEdge("nodes","parse");
	g.addEdge("nodes","structure");
	g.addEdge("nodes","tree");
	g.addEdge("leaf","nodes");
	g.addEdge("leaf","leaf");
	g.addEdge("leaf","ball");
	g.addEdge("leaf","john");
	g.addEdge("leaf","parse");
	g.addEdge("leaf","structure");
	g.addEdge("leaf","tree");
	g.addEdge("ball","nodes");
	g.addEdge("ball","leaf");
	g.addEdge("ball","ball");
	g.addEdge("ball","john");
	g.addEdge("ball","parse");
	g.addEdge("ball","structure");
	g.addEdge("ball","tree");
	g.addEdge("john","nodes");
	g.addEdge("john","leaf");
	g.addEdge("john","ball");
	g.addEdge("john","john");
	g.addEdge("john","parse");
	g.addEdge("john","structure");
	g.addEdge("john","tree");
	g.addEdge("parse","nodes");
	g.addEdge("parse","leaf");
	g.addEdge("parse","ball");
	g.addEdge("parse","john");
	g.addEdge("parse","parse");
	g.addEdge("parse","structure");
	g.addEdge("parse","tree");
	g.addEdge("structure","nodes");
	g.addEdge("structure","leaf");
	g.addEdge("structure","ball");
	g.addEdge("structure","john");
	g.addEdge("structure","parse");
	g.addEdge("structure","structure");
	g.addEdge("structure","tree");
	g.addEdge("tree","nodes");
	g.addEdge("tree","leaf");
	g.addEdge("tree","ball");
	g.addEdge("tree","john");
	g.addEdge("tree","parse");
	g.addEdge("tree","structure");
	g.addEdge("tree","tree");
	g.addNode("parse");
	g.addNode("tree");
	g.addNode("information");
	g.addNode("bar");
	g.addNode("theory");
	g.addEdge("parse","parse");
	g.addEdge("parse","tree");
	g.addEdge("parse","information");
	g.addEdge("parse","bar");
	g.addEdge("parse","theory");
	g.addEdge("tree","parse");
	g.addEdge("tree","tree");
	g.addEdge("tree","information");
	g.addEdge("tree","bar");
	g.addEdge("tree","theory");
	g.addEdge("information","parse");
	g.addEdge("information","tree");
	g.addEdge("information","information");
	g.addEdge("information","bar");
	g.addEdge("information","theory");
	g.addEdge("bar","parse");
	g.addEdge("bar","tree");
	g.addEdge("bar","information");
	g.addEdge("bar","bar");
	g.addEdge("bar","theory");
	g.addEdge("theory","parse");
	g.addEdge("theory","tree");
	g.addEdge("theory","information");
	g.addEdge("theory","bar");
	g.addEdge("theory","theory");
	g.addNode("parse");
	g.addNode("tree");
	g.addNode("english");
	g.addNode("sentence");
	g.addNode("john");
	g.addNode("ball");
	g.addNode("image");
	g.addEdge("parse","parse");
	g.addEdge("parse","tree");
	g.addEdge("parse","english");
	g.addEdge("parse","sentence");
	g.addEdge("parse","john");
	g.addEdge("parse","ball");
	g.addEdge("parse","image");
	g.addEdge("tree","parse");
	g.addEdge("tree","tree");
	g.addEdge("tree","english");
	g.addEdge("tree","sentence");
	g.addEdge("tree","john");
	g.addEdge("tree","ball");
	g.addEdge("tree","image");
	g.addEdge("english","parse");
	g.addEdge("english","tree");
	g.addEdge("english","english");
	g.addEdge("english","sentence");
	g.addEdge("english","john");
	g.addEdge("english","ball");
	g.addEdge("english","image");
	g.addEdge("sentence","parse");
	g.addEdge("sentence","tree");
	g.addEdge("sentence","english");
	g.addEdge("sentence","sentence");
	g.addEdge("sentence","john");
	g.addEdge("sentence","ball");
	g.addEdge("sentence","image");
	g.addEdge("john","parse");
	g.addEdge("john","tree");
	g.addEdge("john","english");
	g.addEdge("john","sentence");
	g.addEdge("john","john");
	g.addEdge("john","ball");
	g.addEdge("john","image");
	g.addEdge("ball","parse");
	g.addEdge("ball","tree");
	g.addEdge("ball","english");
	g.addEdge("ball","sentence");
	g.addEdge("ball","john");
	g.addEdge("ball","ball");
	g.addEdge("ball","image");
	g.addEdge("image","parse");
	g.addEdge("image","tree");
	g.addEdge("image","english");
	g.addEdge("image","sentence");
	g.addEdge("image","john");
	g.addEdge("image","ball");
	g.addEdge("image","image");
	g.addNode("parse");
	g.addNode("tree");
	g.addNode("nodes");
	g.addNode("branches");
	g.addEdge("parse","parse");
	g.addEdge("parse","tree");
	g.addEdge("parse","nodes");
	g.addEdge("parse","branches");
	g.addEdge("tree","parse");
	g.addEdge("tree","tree");
	g.addEdge("tree","nodes");
	g.addEdge("tree","branches");
	g.addEdge("nodes","parse");
	g.addEdge("nodes","tree");
	g.addEdge("nodes","nodes");
	g.addEdge("nodes","branches");
	g.addEdge("branches","parse");
	g.addEdge("branches","tree");
	g.addEdge("branches","nodes");
	g.addEdge("branches","branches");
	g.addNode("grammar");
	g.addNode("parse");
	g.addNode("trees");
	g.addNode("string");
	g.addNode("syntactic");
	g.addNode("ambiguity");
	g.addEdge("grammar","grammar");
	g.addEdge("grammar","parse");
	g.addEdge("grammar","trees");
	g.addEdge("grammar","string");
	g.addEdge("grammar","syntactic");
	g.addEdge("grammar","ambiguity");
	g.addEdge("parse","grammar");
	g.addEdge("parse","parse");
	g.addEdge("parse","trees");
	g.addEdge("parse","string");
	g.addEdge("parse","syntactic");
	g.addEdge("parse","ambiguity");
	g.addEdge("trees","grammar");
	g.addEdge("trees","parse");
	g.addEdge("trees","trees");
	g.addEdge("trees","string");
	g.addEdge("trees","syntactic");
	g.addEdge("trees","ambiguity");
	g.addEdge("string","grammar");
	g.addEdge("string","parse");
	g.addEdge("string","trees");
	g.addEdge("string","string");
	g.addEdge("string","syntactic");
	g.addEdge("string","ambiguity");
	g.addEdge("syntactic","grammar");
	g.addEdge("syntactic","parse");
	g.addEdge("syntactic","trees");
	g.addEdge("syntactic","string");
	g.addEdge("syntactic","syntactic");
	g.addEdge("syntactic","ambiguity");
	g.addEdge("ambiguity","grammar");
	g.addEdge("ambiguity","parse");
	g.addEdge("ambiguity","trees");
	g.addEdge("ambiguity","string");
	g.addEdge("ambiguity","syntactic");
	g.addEdge("ambiguity","ambiguity");
	g.addNode("language");
	g.addNode("trees");
	g.addNode("parse");
	g.addNode("syntax");
	g.addNode("trees");
	g.addNode("syntax");
	g.addNode("trees");
	g.addNode("structure");
	g.addNode("elements");
	g.addNode("syntax");
	g.addNode("input");
	g.addEdge("language","language");
	g.addEdge("language","trees");
	g.addEdge("language","parse");
	g.addEdge("language","syntax");
	g.addEdge("language","trees");
	g.addEdge("language","syntax");
	g.addEdge("language","trees");
	g.addEdge("language","structure");
	g.addEdge("language","elements");
	g.addEdge("language","syntax");
	g.addEdge("language","input");
	g.addEdge("trees","language");
	g.addEdge("trees","trees");
	g.addEdge("trees","parse");
	g.addEdge("trees","syntax");
	g.addEdge("trees","trees");
	g.addEdge("trees","syntax");
	g.addEdge("trees","trees");
	g.addEdge("trees","structure");
	g.addEdge("trees","elements");
	g.addEdge("trees","syntax");
	g.addEdge("trees","input");
	g.addEdge("parse","language");
	g.addEdge("parse","trees");
	g.addEdge("parse","parse");
	g.addEdge("parse","syntax");
	g.addEdge("parse","trees");
	g.addEdge("parse","syntax");
	g.addEdge("parse","trees");
	g.addEdge("parse","structure");
	g.addEdge("parse","elements");
	g.addEdge("parse","syntax");
	g.addEdge("parse","input");
	g.addEdge("syntax","language");
	g.addEdge("syntax","trees");
	g.addEdge("syntax","parse");
	g.addEdge("syntax","syntax");
	g.addEdge("syntax","trees");
	g.addEdge("syntax","syntax");
	g.addEdge("syntax","trees");
	g.addEdge("syntax","structure");
	g.addEdge("syntax","elements");
	g.addEdge("syntax","syntax");
	g.addEdge("syntax","input");
	g.addEdge("trees","language");
	g.addEdge("trees","trees");
	g.addEdge("trees","parse");
	g.addEdge("trees","syntax");
	g.addEdge("trees","trees");
	g.addEdge("trees","syntax");
	g.addEdge("trees","trees");
	g.addEdge("trees","structure");
	g.addEdge("trees","elements");
	g.addEdge("trees","syntax");
	g.addEdge("trees","input");
	g.addEdge("syntax","language");
	g.addEdge("syntax","trees");
	g.addEdge("syntax","parse");
	g.addEdge("syntax","syntax");
	g.addEdge("syntax","trees");
	g.addEdge("syntax","syntax");
	g.addEdge("syntax","trees");
	g.addEdge("syntax","structure");
	g.addEdge("syntax","elements");
	g.addEdge("syntax","syntax");
	g.addEdge("syntax","input");
	g.addEdge("trees","language");
	g.addEdge("trees","trees");
	g.addEdge("trees","parse");
	g.addEdge("trees","syntax");
	g.addEdge("trees","trees");
	g.addEdge("trees","syntax");
	g.addEdge("trees","trees");
	g.addEdge("trees","structure");
	g.addEdge("trees","elements");
	g.addEdge("trees","syntax");
	g.addEdge("trees","input");
	g.addEdge("structure","language");
	g.addEdge("structure","trees");
	g.addEdge("structure","parse");
	g.addEdge("structure","syntax");
	g.addEdge("structure","trees");
	g.addEdge("structure","syntax");
	g.addEdge("structure","trees");
	g.addEdge("structure","structure");
	g.addEdge("structure","elements");
	g.addEdge("structure","syntax");
	g.addEdge("structure","input");
	g.addEdge("elements","language");
	g.addEdge("elements","trees");
	g.addEdge("elements","parse");
	g.addEdge("elements","syntax");
	g.addEdge("elements","trees");
	g.addEdge("elements","syntax");
	g.addEdge("elements","trees");
	g.addEdge("elements","structure");
	g.addEdge("elements","elements");
	g.addEdge("elements","syntax");
	g.addEdge("elements","input");
	g.addEdge("syntax","language");
	g.addEdge("syntax","trees");
	g.addEdge("syntax","parse");
	g.addEdge("syntax","syntax");
	g.addEdge("syntax","trees");
	g.addEdge("syntax","syntax");
	g.addEdge("syntax","trees");
	g.addEdge("syntax","structure");
	g.addEdge("syntax","elements");
	g.addEdge("syntax","syntax");
	g.addEdge("syntax","input");
	g.addEdge("input","language");
	g.addEdge("input","trees");
	g.addEdge("input","parse");
	g.addEdge("input","syntax");
	g.addEdge("input","trees");
	g.addEdge("input","syntax");
	g.addEdge("input","trees");
	g.addEdge("input","structure");
	g.addEdge("input","elements");
	g.addEdge("input","syntax");
	g.addEdge("input","input");
	g.addNode("languages");
	g.addNode("trees");
	g.addNode("programming");
	g.addNode("parse");
	g.addNode("languages");
	g.addNode("language");
	g.addNode("sentences");
	g.addNode("processing");
	g.addNode("processing");
	g.addNode("computer");
	g.addNode("languages");
	g.addEdge("languages","languages");
	g.addEdge("languages","trees");
	g.addEdge("languages","programming");
	g.addEdge("languages","parse");
	g.addEdge("languages","languages");
	g.addEdge("languages","language");
	g.addEdge("languages","sentences");
	g.addEdge("languages","processing");
	g.addEdge("languages","processing");
	g.addEdge("languages","computer");
	g.addEdge("languages","languages");
	g.addEdge("trees","languages");
	g.addEdge("trees","trees");
	g.addEdge("trees","programming");
	g.addEdge("trees","parse");
	g.addEdge("trees","languages");
	g.addEdge("trees","language");
	g.addEdge("trees","sentences");
	g.addEdge("trees","processing");
	g.addEdge("trees","processing");
	g.addEdge("trees","computer");
	g.addEdge("trees","languages");
	g.addEdge("programming","languages");
	g.addEdge("programming","trees");
	g.addEdge("programming","programming");
	g.addEdge("programming","parse");
	g.addEdge("programming","languages");
	g.addEdge("programming","language");
	g.addEdge("programming","sentences");
	g.addEdge("programming","processing");
	g.addEdge("programming","processing");
	g.addEdge("programming","computer");
	g.addEdge("programming","languages");
	g.addEdge("parse","languages");
	g.addEdge("parse","trees");
	g.addEdge("parse","programming");
	g.addEdge("parse","parse");
	g.addEdge("parse","languages");
	g.addEdge("parse","language");
	g.addEdge("parse","sentences");
	g.addEdge("parse","processing");
	g.addEdge("parse","processing");
	g.addEdge("parse","computer");
	g.addEdge("parse","languages");
	g.addEdge("languages","languages");
	g.addEdge("languages","trees");
	g.addEdge("languages","programming");
	g.addEdge("languages","parse");
	g.addEdge("languages","languages");
	g.addEdge("languages","language");
	g.addEdge("languages","sentences");
	g.addEdge("languages","processing");
	g.addEdge("languages","processing");
	g.addEdge("languages","computer");
	g.addEdge("languages","languages");
	g.addEdge("language","languages");
	g.addEdge("language","trees");
	g.addEdge("language","programming");
	g.addEdge("language","parse");
	g.addEdge("language","languages");
	g.addEdge("language","language");
	g.addEdge("language","sentences");
	g.addEdge("language","processing");
	g.addEdge("language","processing");
	g.addEdge("language","computer");
	g.addEdge("language","languages");
	g.addEdge("sentences","languages");
	g.addEdge("sentences","trees");
	g.addEdge("sentences","programming");
	g.addEdge("sentences","parse");
	g.addEdge("sentences","languages");
	g.addEdge("sentences","language");
	g.addEdge("sentences","sentences");
	g.addEdge("sentences","processing");
	g.addEdge("sentences","processing");
	g.addEdge("sentences","computer");
	g.addEdge("sentences","languages");
	g.addEdge("processing","languages");
	g.addEdge("processing","trees");
	g.addEdge("processing","programming");
	g.addEdge("processing","parse");
	g.addEdge("processing","languages");
	g.addEdge("processing","language");
	g.addEdge("processing","sentences");
	g.addEdge("processing","processing");
	g.addEdge("processing","processing");
	g.addEdge("processing","computer");
	g.addEdge("processing","languages");
	g.addEdge("processing","languages");
	g.addEdge("processing","trees");
	g.addEdge("processing","programming");
	g.addEdge("processing","parse");
	g.addEdge("processing","languages");
	g.addEdge("processing","language");
	g.addEdge("processing","sentences");
	g.addEdge("processing","processing");
	g.addEdge("processing","processing");
	g.addEdge("processing","computer");
	g.addEdge("processing","languages");
	g.addEdge("computer","languages");
	g.addEdge("computer","trees");
	g.addEdge("computer","programming");
	g.addEdge("computer","parse");
	g.addEdge("computer","languages");
	g.addEdge("computer","language");
	g.addEdge("computer","sentences");
	g.addEdge("computer","processing");
	g.addEdge("computer","processing");
	g.addEdge("computer","computer");
	g.addEdge("computer","languages");
	g.addEdge("languages","languages");
	g.addEdge("languages","trees");
	g.addEdge("languages","programming");
	g.addEdge("languages","parse");
	g.addEdge("languages","languages");
	g.addEdge("languages","language");
	g.addEdge("languages","sentences");
	g.addEdge("languages","processing");
	g.addEdge("languages","processing");
	g.addEdge("languages","computer");
	g.addEdge("languages","languages");
	g.addNode("grammar");
	g.addNode("nodes");
	g.addNode("tree");
	g.addNode("parse");
	g.addNode("leaf");
	g.addNode("grammar");
	g.addNode("terminals");
	g.addNode("nodes");
	g.addEdge("grammar","grammar");
	g.addEdge("grammar","nodes");
	g.addEdge("grammar","tree");
	g.addEdge("grammar","parse");
	g.addEdge("grammar","leaf");
	g.addEdge("grammar","grammar");
	g.addEdge("grammar","terminals");
	g.addEdge("grammar","nodes");
	g.addEdge("nodes","grammar");
	g.addEdge("nodes","nodes");
	g.addEdge("nodes","tree");
	g.addEdge("nodes","parse");
	g.addEdge("nodes","leaf");
	g.addEdge("nodes","grammar");
	g.addEdge("nodes","terminals");
	g.addEdge("nodes","nodes");
	g.addEdge("tree","grammar");
	g.addEdge("tree","nodes");
	g.addEdge("tree","tree");
	g.addEdge("tree","parse");
	g.addEdge("tree","leaf");
	g.addEdge("tree","grammar");
	g.addEdge("tree","terminals");
	g.addEdge("tree","nodes");
	g.addEdge("parse","grammar");
	g.addEdge("parse","nodes");
	g.addEdge("parse","tree");
	g.addEdge("parse","parse");
	g.addEdge("parse","leaf");
	g.addEdge("parse","grammar");
	g.addEdge("parse","terminals");
	g.addEdge("parse","nodes");
	g.addEdge("leaf","grammar");
	g.addEdge("leaf","nodes");
	g.addEdge("leaf","tree");
	g.addEdge("leaf","parse");
	g.addEdge("leaf","leaf");
	g.addEdge("leaf","grammar");
	g.addEdge("leaf","terminals");
	g.addEdge("leaf","nodes");
	g.addEdge("grammar","grammar");
	g.addEdge("grammar","nodes");
	g.addEdge("grammar","tree");
	g.addEdge("grammar","parse");
	g.addEdge("grammar","leaf");
	g.addEdge("grammar","grammar");
	g.addEdge("grammar","terminals");
	g.addEdge("grammar","nodes");
	g.addEdge("terminals","grammar");
	g.addEdge("terminals","nodes");
	g.addEdge("terminals","tree");
	g.addEdge("terminals","parse");
	g.addEdge("terminals","leaf");
	g.addEdge("terminals","grammar");
	g.addEdge("terminals","terminals");
	g.addEdge("terminals","nodes");
	g.addEdge("nodes","grammar");
	g.addEdge("nodes","nodes");
	g.addEdge("nodes","tree");
	g.addEdge("nodes","parse");
	g.addEdge("nodes","leaf");
	g.addEdge("nodes","grammar");
	g.addEdge("nodes","terminals");
	g.addEdge("nodes","nodes");
	g.addNode("grammar");
	g.addNode("string");
	g.addNode("tree");
	g.addNode("syntax");
	g.addNode("structure");
	g.addNode("tree");
	g.addNode("tree");
	g.addNode("parse");
	g.addEdge("grammar","grammar");
	g.addEdge("grammar","string");
	g.addEdge("grammar","tree");
	g.addEdge("grammar","syntax");
	g.addEdge("grammar","structure");
	g.addEdge("grammar","tree");
	g.addEdge("grammar","tree");
	g.addEdge("grammar","parse");
	g.addEdge("string","grammar");
	g.addEdge("string","string");
	g.addEdge("string","tree");
	g.addEdge("string","syntax");
	g.addEdge("string","structure");
	g.addEdge("string","tree");
	g.addEdge("string","tree");
	g.addEdge("string","parse");
	g.addEdge("tree","grammar");
	g.addEdge("tree","string");
	g.addEdge("tree","tree");
	g.addEdge("tree","syntax");
	g.addEdge("tree","structure");
	g.addEdge("tree","tree");
	g.addEdge("tree","tree");
	g.addEdge("tree","parse");
	g.addEdge("syntax","grammar");
	g.addEdge("syntax","string");
	g.addEdge("syntax","tree");
	g.addEdge("syntax","syntax");
	g.addEdge("syntax","structure");
	g.addEdge("syntax","tree");
	g.addEdge("syntax","tree");
	g.addEdge("syntax","parse");
	g.addEdge("structure","grammar");
	g.addEdge("structure","string");
	g.addEdge("structure","tree");
	g.addEdge("structure","syntax");
	g.addEdge("structure","structure");
	g.addEdge("structure","tree");
	g.addEdge("structure","tree");
	g.addEdge("structure","parse");
	g.addEdge("tree","grammar");
	g.addEdge("tree","string");
	g.addEdge("tree","tree");
	g.addEdge("tree","syntax");
	g.addEdge("tree","structure");
	g.addEdge("tree","tree");
	g.addEdge("tree","tree");
	g.addEdge("tree","parse");
	g.addEdge("tree","grammar");
	g.addEdge("tree","string");
	g.addEdge("tree","tree");
	g.addEdge("tree","syntax");
	g.addEdge("tree","structure");
	g.addEdge("tree","tree");
	g.addEdge("tree","tree");
	g.addEdge("tree","parse");
	g.addEdge("parse","grammar");
	g.addEdge("parse","string");
	g.addEdge("parse","tree");
	g.addEdge("parse","syntax");
	g.addEdge("parse","structure");
	g.addEdge("parse","tree");
	g.addEdge("parse","tree");
	g.addEdge("parse","parse");
	g.addNode("parent");
	g.addNode("np");
	g.addNode("vp");
	g.addNode("tree");
	g.addNode("example");
	g.addNode("branch");
	g.addNode("node");
	g.addNode("child");
	g.addNode("node");
	g.addEdge("parent","parent");
	g.addEdge("parent","np");
	g.addEdge("parent","vp");
	g.addEdge("parent","tree");
	g.addEdge("parent","example");
	g.addEdge("parent","branch");
	g.addEdge("parent","node");
	g.addEdge("parent","child");
	g.addEdge("parent","node");
	g.addEdge("np","parent");
	g.addEdge("np","np");
	g.addEdge("np","vp");
	g.addEdge("np","tree");
	g.addEdge("np","example");
	g.addEdge("np","branch");
	g.addEdge("np","node");
	g.addEdge("np","child");
	g.addEdge("np","node");
	g.addEdge("vp","parent");
	g.addEdge("vp","np");
	g.addEdge("vp","vp");
	g.addEdge("vp","tree");
	g.addEdge("vp","example");
	g.addEdge("vp","branch");
	g.addEdge("vp","node");
	g.addEdge("vp","child");
	g.addEdge("vp","node");
	g.addEdge("tree","parent");
	g.addEdge("tree","np");
	g.addEdge("tree","vp");
	g.addEdge("tree","tree");
	g.addEdge("tree","example");
	g.addEdge("tree","branch");
	g.addEdge("tree","node");
	g.addEdge("tree","child");
	g.addEdge("tree","node");
	g.addEdge("example","parent");
	g.addEdge("example","np");
	g.addEdge("example","vp");
	g.addEdge("example","tree");
	g.addEdge("example","example");
	g.addEdge("example","branch");
	g.addEdge("example","node");
	g.addEdge("example","child");
	g.addEdge("example","node");
	g.addEdge("branch","parent");
	g.addEdge("branch","np");
	g.addEdge("branch","vp");
	g.addEdge("branch","tree");
	g.addEdge("branch","example");
	g.addEdge("branch","branch");
	g.addEdge("branch","node");
	g.addEdge("branch","child");
	g.addEdge("branch","node");
	g.addEdge("node","parent");
	g.addEdge("node","np");
	g.addEdge("node","vp");
	g.addEdge("node","tree");
	g.addEdge("node","example");
	g.addEdge("node","branch");
	g.addEdge("node","node");
	g.addEdge("node","child");
	g.addEdge("node","node");
	g.addEdge("child","parent");
	g.addEdge("child","np");
	g.addEdge("child","vp");
	g.addEdge("child","tree");
	g.addEdge("child","example");
	g.addEdge("child","branch");
	g.addEdge("child","node");
	g.addEdge("child","child");
	g.addEdge("child","node");
	g.addEdge("node","parent");
	g.addEdge("node","np");
	g.addEdge("node","vp");
	g.addEdge("node","tree");
	g.addEdge("node","example");
	g.addEdge("node","branch");
	g.addEdge("node","node");
	g.addEdge("node","child");
	g.addEdge("node","node");
	g.addNode("node");
	g.addNode("terms");
	g.addNode("child");
	g.addNode("example");
	g.addNode("relationship");
	g.addNode("mother");
	g.addNode("daughter");
	g.addEdge("node","node");
	g.addEdge("node","terms");
	g.addEdge("node","child");
	g.addEdge("node","example");
	g.addEdge("node","relationship");
	g.addEdge("node","mother");
	g.addEdge("node","daughter");
	g.addEdge("terms","node");
	g.addEdge("terms","terms");
	g.addEdge("terms","child");
	g.addEdge("terms","example");
	g.addEdge("terms","relationship");
	g.addEdge("terms","mother");
	g.addEdge("terms","daughter");
	g.addEdge("child","node");
	g.addEdge("child","terms");
	g.addEdge("child","child");
	g.addEdge("child","example");
	g.addEdge("child","relationship");
	g.addEdge("child","mother");
	g.addEdge("child","daughter");
	g.addEdge("example","node");
	g.addEdge("example","terms");
	g.addEdge("example","child");
	g.addEdge("example","example");
	g.addEdge("example","relationship");
	g.addEdge("example","mother");
	g.addEdge("example","daughter");
	g.addEdge("relationship","node");
	g.addEdge("relationship","terms");
	g.addEdge("relationship","child");
	g.addEdge("relationship","example");
	g.addEdge("relationship","relationship");
	g.addEdge("relationship","mother");
	g.addEdge("relationship","daughter");
	g.addEdge("mother","node");
	g.addEdge("mother","terms");
	g.addEdge("mother","child");
	g.addEdge("mother","example");
	g.addEdge("mother","relationship");
	g.addEdge("mother","mother");
	g.addEdge("mother","daughter");
	g.addEdge("daughter","node");
	g.addEdge("daughter","terms");
	g.addEdge("daughter","child");
	g.addEdge("daughter","example");
	g.addEdge("daughter","relationship");
	g.addEdge("daughter","mother");
	g.addEdge("daughter","daughter");

    /* layout the graph using the Spring layout implementation */
    var layouter = new Graph.Layout.Spring(g);
    
    /* draw the graph using the RaphaelJS draw implementation */
    renderer = new Graph.Renderer.Raphael('canvas', g, width, height);
    
    redraw = function() {
        layouter.layout();
        renderer.draw();
    };
    hide = function(id) {
        g.nodes[id].hide();
    };
    show = function(id) {
        g.nodes[id].show();
    };
    //    console.log(g.nodes["kiwi"]);
};